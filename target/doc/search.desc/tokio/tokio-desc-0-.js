searchState.loadedDescShard("tokio", 0, "A runtime for writing reliable network applications …\nTraits, helpers, and type definitions for asynchronous I/O …\nTCP/UDP/Unix bindings for <code>tokio</code>.\nPins a value on the stack.\nDue to the <code>Stream</code> trait’s inclusion in <code>std</code> landing later …\nSynchronization primitives for use in asynchronous …\nAsynchronous green-threads.\nReads bytes asynchronously.\nReads bytes from a source.\nSeek bytes asynchronously.\nWrites bytes asynchronously.\nA wrapper around a byte buffer that is incrementally …\nAdvances the size of the filled region of the buffer.\nAsserts that the first <code>n</code> unfilled bytes of the buffer are …\nReturns the total capacity of the buffer.\nClears the buffer, resetting the filled region to empty.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nReturns a shared reference to the filled portion of the …\nReturns a mutable reference to the filled portion of the …\nReturns the argument unchanged.\nReturns a mutable reference to the unfilled part of the …\nReturns a mutable reference to the first <code>n</code> bytes of the …\nReturns a shared reference to the initialized portion of …\nReturns a mutable reference to the initialized portion of …\nReturns a mutable reference to the entire buffer, without …\nCalls <code>U::from(self)</code>.\nDetermines if this writer has an efficient …\nDetermines if this writer has an efficient …\nCreates a new <code>ReadBuf</code> from a fully initialized buffer.\nWaits for a seek operation to complete.\nAttempts to return the contents of the internal buffer, …\nAttempts to flush the object, ensuring that any buffered …\nAttempts to read from the <code>AsyncRead</code> into <code>buf</code>.\nInitiates or attempts to shut down this writer, returning …\nAttempt to write bytes from <code>buf</code> into the object.\nLike <code>poll_write</code>, except that it writes from a slice of …\nLike <code>poll_write</code>, except that it writes from a slice of …\nAppends data to the buffer, advancing the written position …\nReturns the number of bytes at the end of the slice that …\nSets the size of the filled region of the buffer.\nAttempts to seek to an offset, in bytes, in a stream.\nReturns a new <code>ReadBuf</code> comprised of the unfilled section up …\nReturns a mutable reference to the unfilled part of the …\nCreates a new <code>ReadBuf</code> from a buffer that may be …\nConverts or resolves without blocking to one or more …\nError returned from the <code>Semaphore::acquire</code> function.\nThe cell was already initialized when <code>OnceCell::set</code> was …\nA barrier enables multiple tasks to synchronize the …\nA <code>BarrierWaitResult</code> is returned by <code>wait</code> when all tasks in …\nThe semaphore has been closed and cannot issue new permits.\nThe cell is currently being initialized.\nThe maximum number of permits which a semaphore can hold. …\nA handle to a held <code>Mutex</code> that has had a function applied …\nAn asynchronous <code>Mutex</code>-like type.\nA handle to a held <code>Mutex</code>. The guard can be held across any …\nThe semaphore has no available permits.\nNotifies a single task to wake up.\nA thread-safe cell that can be written to only once.\nA owned handle to a held <code>Mutex</code> that has had a function …\nAn owned handle to a held <code>Mutex</code>.\nOwned RAII structure used to release the exclusive write …\nOwned RAII structure used to release the shared read …\nOwned RAII structure used to release the exclusive write …\nAn owned permit from the semaphore.\nAn asynchronous reader-writer lock.\nRAII structure used to release the exclusive write access …\nRAII structure used to release the shared read access of a …\nRAII structure used to release the exclusive write access …\nCounting semaphore performing asynchronous permit …\nA permit from the semaphore.\nErrors that can be returned from <code>OnceCell::set</code>.\nA thread-safe cell that can be written to only once.\nError that can be returned from <code>SetOnce::set</code>.\nError returned from the <code>Semaphore::try_acquire</code> function.\nError returned from the <code>Mutex::try_lock</code>, <code>RwLock::try_read</code> …\nAcquires a permit from the semaphore.\nAcquires <code>n</code> permits from the semaphore.\nAcquires <code>n</code> permits from the semaphore.\nAcquires a permit from the semaphore.\nAdds <code>n</code> new permits to the semaphore.\nReturns the current number of available permits.\nBlockingly locks this <code>Mutex</code>. When the lock has been …\nBlockingly locks this <code>Mutex</code>. When the lock has been …\nBlockingly locks this <code>RwLock</code> with shared read access.\nBlockingly locks this <code>RwLock</code> with exclusive write access.\nA multi-producer, multi-consumer broadcast queue. Each …\nCloses the semaphore.\nCreates a new lock in an unlocked state ready for use.\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nCreates a new empty <code>OnceCell</code> instance.\nCreates a new empty <code>SetOnce</code> instance.\nCreate a new <code>Notify</code>, initialized without a permit.\nCreates a new semaphore with the initial number of permits.\nCreates a new <code>OnceCell</code> that contains the provided value.\nCreates a new <code>SetOnce</code> that contains the provided value.\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked …\nAtomically downgrades a write lock into a read lock …\nAtomically downgrades a write lock into a read lock …\nMakes a new <code>OwnedRwLockReadGuard</code> for a component of the …\nMakes a new <code>RwLockReadGuard</code> for a component of the locked …\nForgets the permit <strong>without</strong> releasing it back to the …\nForgets the permit <strong>without</strong> releasing it back to the …\nDecrease a semaphore’s permits by a maximum of <code>n</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNamed future types.\nReturns a reference to the value currently stored in the …\nReturns a reference to the value currently stored in the …\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the underlying data.\nReturns a mutable reference to the value currently stored …\nGets the value currently in the <code>OnceCell</code>, or initialize it …\nGets the value currently in the <code>OnceCell</code>, or initialize it …\nReturns <code>true</code> if the <code>OnceCell</code> currently contains a value, …\nReturns <code>true</code> if the <code>SetOnce</code> currently contains a value, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the mutex, returning the underlying data.\nConsumes the lock, returning the underlying data.\nTakes the value from the cell, destroying the cell in the …\nTakes the value from the cell, destroying the cell in the …\nConverts this <code>OwnedRwLockWriteGuard</code> into an …\nConverts this <code>RwLockWriteGuard</code> into an …\nWhether <code>SetError</code> is <code>SetError::AlreadyInitializedError</code>.\nReturns true if the semaphore is closed\nWhether <code>SetError</code> is <code>SetError::InitializingError</code>\nReturns <code>true</code> if this task from wait is the “leader task…\nLocks this mutex, causing the current task to yield until …\nLocks this mutex, causing the current task to yield until …\nMakes a new <code>MappedMutexGuard</code> for a component of the locked …\nMakes a new <code>OwnedMappedMutexGuard</code> for a component of the …\nMakes a new <code>MappedMutexGuard</code> for a component of the locked …\nMakes a new <code>OwnedMappedMutexGuard</code> for a component of the …\nMakes a new <code>OwnedRwLockReadGuard</code> for a component of the …\nMakes a new <code>OwnedRwLockMappedWriteGuard</code> for a component of …\nMakes a new <code>OwnedRwLockMappedWriteGuard</code> for a component of …\nMakes a new <code>RwLockReadGuard</code> for a component of the locked …\nMakes a new <code>RwLockMappedWriteGuard</code> for a component of the …\nMakes a new <code>RwLockMappedWriteGuard</code> for a component of the …\nMerge two <code>SemaphorePermit</code> instances together, consuming …\nMerge two <code>OwnedSemaphorePermit</code> instances together, …\nA multi-producer, single-consumer queue for sending values …\nReturns a reference to the original <code>Mutex</code>.\nReturns a reference to the original <code>Arc&lt;Mutex&gt;</code>.\nCreates a new lock in an unlocked state ready for use.\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.\nCreates a new empty <code>OnceCell</code> instance.\nCreates a new empty <code>SetOnce</code> instance.\nCreates a new barrier that can block a given number of …\nCreate a new <code>Notify</code>, initialized without a permit.\nCreates a new semaphore with the initial number of permits.\nCreates a new <code>OnceCell</code> that contains the provided value, …\nCreates a new <code>SetOnce</code> that contains the provided value, if …\nWait for a notification.\nWait for a notification with an owned <code>Future</code>.\nNotifies the last waiting task.\nNotifies the first waiting task.\nNotifies all waiting tasks.\nReturns the number of permits held by <code>self</code>.\nReturns the number of permits held by <code>self</code>.\nA one-shot channel is used for sending a single message …\nLocks this <code>RwLock</code> with shared read access, causing the …\nLocks this <code>RwLock</code> with shared read access, causing the …\nReturns a reference to the original <code>Arc&lt;RwLock&gt;</code>.\nReturns a reference to the original <code>Arc&lt;RwLock&gt;</code>.\nReturns a reference to the original <code>Arc&lt;RwLock&gt;</code>.\nReturns the <code>Semaphore</code> from which this permit was acquired.\nSets the value of the <code>OnceCell</code> to the given value if the …\nSets the value of the <code>SetOnce</code> to the given value if the …\nSplits <code>n</code> permits from <code>self</code> and returns a new …\nSplits <code>n</code> permits from <code>self</code> and returns a new …\nTakes ownership of the current value, leaving the cell …\nTries to acquire a permit from the semaphore.\nTries to acquire <code>n</code> permits from the semaphore.\nTries to acquire <code>n</code> permits from the semaphore.\nTries to acquire a permit from the semaphore.\nAttempts to make a new <code>OwnedRwLockReadGuard</code> for a …\nAttempts to make a new <code>RwLockReadGuard</code> for a component of …\nAttempts to acquire the lock, and returns <code>TryLockError</code> if …\nAttempts to acquire the lock, and returns <code>TryLockError</code> if …\nAttempts to make a new <code>MappedMutexGuard</code> for a component of …\nAttempts to make a new <code>OwnedMappedMutexGuard</code> for a …\nAttempts to make a new <code>MappedMutexGuard</code> for a component of …\nAttempts to make a new <code>OwnedMappedMutexGuard</code> for a …\nAttempts to make a new <code>OwnedRwLockReadGuard</code> for a …\nAttempts to make a new <code>OwnedRwLockMappedWriteGuard</code> for a …\nAttempts to make a new <code>OwnedRwLockMappedWriteGuard</code> for a …\nAttempts to make a new <code>RwLockReadGuard</code> for a component of …\nAttempts to make a new <code>RwLockMappedWriteGuard</code> for a …\nAttempts to make a new <code>RwLockMappedWriteGuard</code> for a …\nAttempts to acquire this <code>RwLock</code> with shared read access.\nAttempts to acquire this <code>RwLock</code> with shared read access.\nAttempts to acquire this <code>RwLock</code> with exclusive write …\nAttempts to acquire this <code>RwLock</code> with exclusive write …\nWaits until set is called. The future returned will keep …\nDoes not resolve until all tasks have rendezvoused here.\nA multi-producer, multi-consumer channel that only retains …\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked …\nLocks this <code>RwLock</code> with exclusive write access, causing the …\nLocks this <code>RwLock</code> with exclusive write access, causing the …\nReceiving-half of the <code>broadcast</code> channel.\nSending-half of the <code>broadcast</code> channel.\nA sender that does not prevent the channel from being …\nBlocking receive to call outside of asynchronous contexts.\nCreate a bounded, multi-producer, multi-consumer channel …\nA future which completes when the number of Receivers …\nConverts the <code>Sender</code> to a <code>WeakSender</code> that does not count …\nBroadcast error types\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if a channel is closed.\nReturns true if there are no queued values.\nReturns true if there aren’t any messages in the channel …\nReturns the number of queued values.\nReturns the number of messages that were sent into the …\nCreates the sending-half of the <code>broadcast</code> channel.\nReturns the number of active receivers.\nReceives the next value for this receiver.\nRe-subscribes to the channel starting from the current …\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if receivers belong to the same channel.\nAttempts to send a value to all active <code>Receiver</code> handles, …\nReturns the number of <code>Sender</code> handles.\nReturns the number of <code>WeakSender</code> handles.\nReturns the number of <code>Sender</code> handles.\nReturns the number of <code>Sender</code> handles.\nCreates a new <code>Receiver</code> handle that will receive values …\nAttempts to return a pending value on this receiver …\nTries to convert a <code>WeakSender</code> into a <code>Sender</code>.\nReturns the number of <code>WeakSender</code> handles.\nReturns the number of <code>WeakSender</code> handles.\nThere are no more active senders implying no further …\nThere are no more active senders implying no further …\nThe channel is currently empty. There are still active …\nThe receiver lagged too far behind. Attempting to receive …\nThe receiver lagged too far behind and has been forcibly …\nAn error returned from the <code>recv</code> function on a <code>Receiver</code>.\nError returned by the <code>send</code> function on a <code>Sender</code>.\nAn error returned from the <code>try_recv</code> function on a <code>Receiver</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFuture returned from <code>Notify::notified()</code>.\nFuture returned from <code>Notify::notified_owned()</code>.\nAdds this future to the list of futures that are ready to …\nAdds this future to the list of futures that are ready to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOwned permit to send one value into the channel.\nPermits to send one value into the channel.\nAn <code>Iterator</code> of <code>Permit</code> that can be used to hold <code>n</code> slots in …\nReceives values from the associated <code>Sender</code>.\nSends values to the associated <code>Receiver</code>.\nReceive values from the associated <code>UnboundedSender</code>.\nSend values to the associated <code>UnboundedReceiver</code>.\nA sender that does not prevent the channel from being …\nAn unbounded sender that does not prevent the channel from …\nBlocking receive to call outside of asynchronous contexts.\nBlocking receive to call outside of asynchronous contexts.\nVariant of <code>Self::recv_many</code> for blocking contexts.\nVariant of <code>Self::recv_many</code> for blocking contexts.\nBlocking send to call outside of asynchronous contexts.\nReturns the current capacity of the channel.\nReturns the current capacity of the channel.\nCreates a bounded mpsc channel for communicating between …\nCloses the receiving half of a channel without dropping it.\nCloses the receiving half of a channel, without dropping …\nCompletes when the receiver has dropped.\nCompletes when the receiver has dropped.\nConverts the <code>Sender</code> to a <code>WeakSender</code> that does not count …\nConverts the <code>UnboundedSender</code> to a <code>WeakUnboundedSender</code> that …\nChannel error types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the channel has been closed. This happens when …\nChecks if a channel is closed.\nChecks if the channel has been closed. This happens when …\nChecks if a channel is closed.\nChecks if a channel is empty.\nChecks if a channel is empty.\nReturns the number of messages in the channel.\nReturns the number of messages in the channel.\nReturns the maximum buffer capacity of the channel.\nReturns the maximum buffer capacity of the channel.\nPolls to receive the next message on this channel.\nPolls to receive the next message on this channel.\nPolls to receive multiple messages on this channel, …\nPolls to receive multiple messages on this channel, …\nReceives the next value for this receiver.\nReceives the next value for this receiver.\nReceives the next values for this receiver and extends …\nReceives the next values for this receiver and extends …\nReleases the reserved capacity <em>without</em> sending a message, …\nWaits for channel capacity. Once capacity to send one …\nWaits for channel capacity. Once capacity to send <code>n</code> …\nWaits for channel capacity, moving the <code>Sender</code> and …\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if permits belong to the same channel.\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if this permit belongs to the same channel as …\nSends a value, waiting until there is capacity.\nSends a value using the reserved capacity.\nSends a value using the reserved capacity.\nAttempts to send a message on this <code>UnboundedSender</code> without …\nReturns the number of <code>Sender</code> handles.\nReturns the number of <code>UnboundedSender</code> handles.\nReturns the number of <code>WeakSender</code> handles.\nReturns the number of <code>WeakUnboundedSender</code> handles.\nReturns the number of <code>Sender</code> handles.\nReturns the number of <code>Sender</code> handles.\nReturns the number of <code>UnboundedSender</code> handles.\nReturns the number of <code>UnboundedSender</code> handles.\nTries to receive the next value for this receiver.\nTries to receive the next value for this receiver.\nTries to acquire a slot in the channel without waiting for …\nTries to acquire <code>n</code> slots in the channel without waiting …\nTries to acquire a slot in the channel without waiting for …\nAttempts to immediately send a message on this <code>Sender</code>\nCreates an unbounded mpsc channel for communicating …\nTries to convert a <code>WeakSender</code> into a <code>Sender</code>. This will …\nTries to convert a <code>WeakUnboundedSender</code> into an …\nReturns the number of <code>WeakSender</code> handles.\nReturns the number of <code>WeakSender</code> handles.\nReturns the number of <code>WeakUnboundedSender</code> handles.\nReturns the number of <code>WeakUnboundedSender</code> handles.\nThe receive half of the channel was explicitly closed or …\nThe <strong>channel</strong>’s sending half has become disconnected, and …\nThis <strong>channel</strong> is currently empty, but the <strong>Sender</strong>(s) have …\nThe data could not be sent on the channel because the …\nError returned by the <code>Sender</code>.\nError returned by <code>try_recv</code>.\nThis enumeration is the list of the possible error …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the <code>TrySendError</code>, returning the unsent value.\nReceives a value from the associated <code>Sender</code>.\nSends a value to the associated <code>Receiver</code>.\nBlocking receive to call outside of asynchronous contexts.\nCreates a new one-shot channel for sending single values …\nPrevents the associated <code>Sender</code> handle from sending a value.\nWaits for the associated <code>Receiver</code> handle to close.\n<code>Oneshot</code> error types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the associated <code>Receiver</code> handle has been …\nChecks if a channel is empty.\nChecks if this receiver is terminated.\nChecks whether the <code>oneshot</code> channel has been closed, and if …\nAttempts to send a value on this channel, returning it …\nAttempts to receive a value.\nThe send half of the channel was dropped without sending a …\nThe send half of the channel has not yet sent a value.\nError returned by the <code>Future</code> implementation for <code>Receiver</code>.\nError returned by the <code>try_recv</code> function on <code>Receiver</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReceives values from the associated <code>Sender</code>.\nReturns a reference to the inner value.\nSends values to the associated <code>Receiver</code>.\nReturns a reference to the most recently sent value.\nReturns a reference to the most recently sent value\nReturns a reference to the most recently sent value and …\nWaits for a change notification, then marks the newest …\nCreates a new watch channel, returning the “send” and …\nCompletes when all receivers have dropped.\nWatch error types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecks if this channel contains a message that this …\nIndicates if the borrowed value is considered as <em>changed</em> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the channel has been closed. This happens when …\nMarks the state as changed.\nMarks the state as unchanged.\nCreates the sending-half of the <code>watch</code> channel.\nReturns the number of receivers that currently exist.\nReturns <code>true</code> if receivers belong to the same channel.\nReturns <code>true</code> if senders belong to the same channel.\nSends a new value via the channel, notifying all receivers.\nModifies the watched value <strong>conditionally</strong> in-place, …\nModifies the watched value <strong>unconditionally</strong> in-place, …\nSends a new value via the channel, notifying all receivers …\nReturns the number of senders that currently exist.\nCreates a new <code>Receiver</code> connected to this <code>Sender</code>.\nWaits for a value that satisfies the provided condition.\nError produced when receiving a change notification.\nError produced when sending a value fails.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")